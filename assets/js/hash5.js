// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.H5 = {
    version: 0.7,
    company: "Hexgis <www.hexgis.com>",
    author: "HexGIS Tecnologias Espaciais Inovadoras",
    isMobile: {
      Android: function() {
        return navigator.userAgent.match(/Android/i);
      },
      BlackBerry: function() {
        return navigator.userAgent.match(/BlackBerry/i);
      },
      iOS: function() {
        return navigator.userAgent.match(/iPhone|iPad|iPod/i);
      },
      Opera: function() {
        return navigator.userAgent.match(/Opera Mini/i);
      },
      Windows: function() {
        return navigator.userAgent.match(/IEMobile/i);
      },
      any: function() {
        return this.Android() || this.BlackBerry() || this.iOS() || this.Opera() || this.Windows();
      }
    },
    Data: {},
    DB: {
      addDB: function(opt) {
        this[opt.name] = {};
        this[opt.name].table = opt.table;
        return this[opt.name].data = null;
      }
    }
  };

  H5.Rest = (function() {
    Rest.prototype.options = {
      url: null,
      restService: "ws_geo_attributequery.php",
      table: null,
      fields: null,
      parameters: null,
      order: null,
      limit: null
    };

    Rest.prototype.data = null;

    function Rest(options) {
      if (options.url.substr(options.url.length - 1, 1) !== "/") {
        options.url += "/";
      }
      this.options = $.extend({}, this.options, options);
      this._request();
    }

    Rest.prototype._request = function() {
      var query, url;
      url = this.options.url + "v1/" + this.options.restService;
      if (this.options.table) {
        query = "&table=" + this.options.table;
      }
      if (this.options.parameters) {
        query += "&parameters=" + this.options.parameters;
      }
      if (this.options.fields) {
        query += "&fields=" + this.options.fields;
      }
      if (this.options.order) {
        query += "&order=" + this.options.order;
      }
      if (this.options.limit) {
        query += "&limit=" + this.options.limit;
      }
      url = url + "?" + query;
      return this.data = JSON.parse(this._getfile(url));
    };

    Rest.prototype._getfile = function(url) {
      var AJAX;
      if (window.XMLHttpRequest) {
        AJAX = new XMLHttpRequest();
      } else {
        AJAX = new ActiveXObject("Microsoft.XMLHTTP");
      }
      if (AJAX) {
        AJAX.open("GET", url, false);
        AJAX.send(null);
        return AJAX.responseText;
      } else {
        return false;
      }
    };

    return Rest;

  })();

  google.load("visualization", "1", {
    packages: ["corechart"]
  });

  google.load("visualization", "1", {
    packages: ["gauge"]
  });

  google.load("visualization", "1", {
    packages: ["table"]
  });

  H5.Charts = {};

  H5.Charts.Container = (function() {
    Container.prototype.options = {
      type: null,
      container: null,
      period: 1,
      title: "",
      defaultClass: "",
      selects: void 0,
      resizing: 0,
      buttons: {
        minusplus: false,
        arrows: false,
        table: false,
        "export": false,
        minimize: false,
        maximize: false,
        close: false
      }
    };

    function Container(options) {
      this.options = $.extend({}, this.options, options);
      this._createContainer();
    }

    Container.prototype.changeTitle = function(title) {
      var pipeline;
      $(this._boxTitle).html(title);
      if (this.options.buttons.arrows || this.options.buttons.minusplus || (this.options.selects != null)) {
        pipeline = "<span class=\"break\"></span>";
        return $(this._boxTitle).prepend(pipeline);
      }
    };

    Container.prototype._createContainer = function() {
      var addBtn, addIcon, boxContent, boxHeader, boxTable, boxTitle, closeBtn, closeIcon, delBtn, delIcon, exportBtn, exportIcon, formBtn, leftBtn, leftCtrl, leftIcon, maxBtn, maxIcon, minBtn, minIcon, pipeline, rightBtn, rightCtrl, rightIcon, tableBtn, tableIcon;
      this._container = document.getElementById(this.options.container);
      boxHeader = document.createElement("div");
      boxHeader.className = "box-header";
      this._boxHeader = boxHeader;
      boxTitle = document.createElement("h2");
      boxTitle.innerHTML = this.options.title;
      this._boxTitle = boxTitle;
      leftCtrl = document.createElement("div");
      leftCtrl.className = "btn-group chart-icon btn-left";
      this._leftCtrl = leftCtrl;
      rightCtrl = document.createElement("div");
      rightCtrl.className = "btn-group chart-icon btn-right";
      this._rightCtrl = rightCtrl;
      boxContent = document.createElement("div");
      boxContent.id = "box-" + this.options.container;
      boxContent.className = "box-content";
      this._boxContent = boxContent;
      $(this._boxHeader).append(this._leftCtrl, this._boxTitle, this._rightCtrl);
      $(this._container).append(this._boxHeader, this._boxContent);
      pipeline = "<span class=\"break\"></span>";
      if (this.options.buttons.minusplus) {
        $(this._boxTitle).prepend(pipeline);
        delBtn = document.createElement("button");
        delBtn.id = this.options.container + "-btn-minus";
        delBtn.className = "btn";
        this._delBtn = delBtn;
        delIcon = document.createElement("i");
        delIcon.className = "icon-minus";
        this._delIcon = delIcon;
        $(this._delBtn).append(this._delIcon);
        addBtn = document.createElement("button");
        addBtn.id = this.options.container + "-btn-plus";
        addBtn.className = "btn";
        this._addBtn = addBtn;
        addIcon = document.createElement("i");
        addIcon.className = "icon-plus";
        this._addIcon = addIcon;
        $(this._addBtn).append(this._addIcon);
        $(this._leftCtrl).append(this._delBtn, this._addBtn);
      } else if (this.options.buttons.arrows) {
        $(this._boxTitle).prepend(pipeline);
        leftBtn = document.createElement("button");
        leftBtn.id = this.options.container + "-btn-left";
        leftBtn.className = "btn";
        this._leftBtn = leftBtn;
        leftIcon = document.createElement("i");
        leftIcon.className = "icon-arrow-left";
        this._leftIcon = leftIcon;
        $(this._leftBtn).append(this._leftIcon);
        rightBtn = document.createElement("button");
        rightBtn.id = this.options.container + "-btn-right";
        rightBtn.className = "btn";
        this._rightBtn = rightBtn;
        rightIcon = document.createElement("i");
        rightIcon.className = "icon-arrow-right";
        this._rightIcon = rightIcon;
        $(this._rightBtn).append(this._rightIcon);
        $(this._leftCtrl).append(this._leftBtn, this._rightBtn);
      } else if (this.options.selects != null) {
        $(this._boxTitle).prepend(pipeline);
        formBtn = document.createElement("form");
        formBtn.name = "form-" + this.options.container;
        formBtn.className = "form-inline";
        this._formBtn = formBtn;
        $.each(this.options.selects, (function(_this) {
          return function(name, options) {
            var select;
            select = "<select id=\"" + name + "Slct\" class=\"input-mini\" name=\"" + name + "\">";
            $.each(options, function(value, key) {
              return select += "<option value=" + value + ">" + key + "</option>";
            });
            select += "</select>";
            return $(_this._formBtn).append(select);
          };
        })(this));
        $(this._leftCtrl).append(this._formBtn);
        $(this._leftCtrl).removeClass("btn-group");
        $.each(this.options.selects, (function(_this) {
          return function(name, data) {
            _this["_" + name + "Slct"] = document["form-" + _this.options.container][name];
            return _this._enableSelect("#" + name + "Slct");
          };
        })(this));
      }
      if (this.options.buttons.table) {
        tableBtn = document.createElement("button");
        tableBtn.id = this.options.container + "-btn-table";
        tableBtn.className = "btn";
        this._tableBtn = tableBtn;
        tableIcon = document.createElement("i");
        tableIcon.className = "icon-table";
        this._tableIcon = tableIcon;
        $(this._tableBtn).append(this._tableIcon);
        $(this._rightCtrl).append(this._tableBtn);
        boxTable = document.createElement("div");
        boxTable.id = "table-" + this.options.container;
        boxTable.className = "box-content-table";
        this._boxTable = boxTable;
        $(this._container).append(this._boxTable);
        this._enableTable();
      }
      if (this.options.buttons["export"]) {
        exportBtn = document.createElement("button");
        exportBtn.id = this.options.container + "-btn-export";
        exportBtn.className = "btn";
        this._exportBtn = exportBtn;
        exportIcon = document.createElement("i");
        exportIcon.className = "icon-download-alt";
        this._exportIcon = exportIcon;
        $(this._exportBtn).append(this._exportIcon);
        $(this._rightCtrl).append(this._exportBtn);
        this._enableExport();
      }
      if (this.options.buttons.minimize) {
        minBtn = document.createElement("button");
        minBtn.id = this.options.container + "-btn-minimize";
        minBtn.className = "btn";
        this._minBtn = minBtn;
        minIcon = document.createElement("i");
        minIcon.className = "icon-chevron-up";
        this._minIcon = minIcon;
        $(this._minBtn).append(this._minIcon);
        $(this._rightCtrl).append(this._minBtn);
        this._enableMinimize();
      }
      if (this.options.buttons.maximize) {
        maxBtn = document.createElement("button");
        maxBtn.id = this.options.container + "-btn-maximize";
        maxBtn.className = "btn";
        this._maxBtn = maxBtn;
        maxIcon = document.createElement("i");
        maxIcon.className = "icon-resize-full";
        this._maxIcon = maxIcon;
        $(this._maxBtn).append(this._maxIcon);
        $(this._rightCtrl).append(this._maxBtn);
        this._enableMaximize();
      }
      if (this.options.buttons.close) {
        closeBtn = document.createElement("button");
        closeBtn.id = this.options.container + "-btn-close";
        closeBtn.className = "btn";
        this._closeBtn = closeBtn;
        closeIcon = document.createElement("i");
        closeIcon.className = "icon-remove";
        this._closeIcon = closeIcon;
        $(this._closeBtn).append(this._closeIcon);
        $(this._rightCtrl).append(this._closeBtn);
        return this._enableClose();
      }
    };

    Container.prototype._enableMinimize = function() {
      return $(this._minBtn).on("click", (function(_this) {
        return function(event) {
          event.preventDefault();
          if ($(_this._boxContent).is(":visible")) {
            _this._minIcon.className = "icon-chevron-down";
            if (_this.options.buttons.minusplus) {
              $(_this._addBtn).prop("disabled", true);
              $(_this._delBtn).prop("disabled", true);
            } else if (_this.options.buttons.arrows) {
              $(_this._leftBtn).prop("disabled", true);
              $(_this._rightBtn).prop("disabled", true);
            }
          } else {
            _this._minIcon.className = "icon-chevron-up";
            if (_this.options.buttons.minusplus) {
              $(_this._addBtn).prop("disabled", false);
              $(_this._delBtn).prop("disabled", false);
            } else if (_this.options.buttons.arrows) {
              $(_this._leftBtn).prop("disabled", false);
              $(_this._rightBtn).prop("disabled", false);
            }
          }
          if ($(_this._boxTable).is(":visible")) {
            $(_this._boxTable).slideToggle("fast", "linear");
          }
          return $(_this._boxContent).slideToggle("fast", "linear");
        };
      })(this));
    };

    Container.prototype._enableMaximize = function() {
      return $(this._maxBtn).on("click", (function(_this) {
        return function(event) {
          event.preventDefault();
          if (_this._maxIcon.className === "icon-resize-full") {
            _this.defaultClass = _this._container.className;
            $(_this._minBtn).prop("disabled", true);
            $(_this._closeBtn).prop("disabled", true);
            _this._maxIcon.className = "icon-resize-small";
            $("#navbar").hide();
          } else {
            $(_this._minBtn).prop("disabled", false);
            $(_this._closeBtn).prop("disabled", false);
            _this._maxIcon.className = "icon-resize-full";
            $("#navbar").show();
          }
          $(_this._boxTable).hide();
          $(_this._boxTable).toggleClass("box-table-overlay");
          _this._tableIcon.className = "icon-table";
          $(_this._container).toggleClass(_this.defaultClass);
          $(_this._container).toggleClass("box-overlay");
          $("body").toggleClass("body-overlay");
          $(_this._boxContent).toggleClass("content-overlay");
          $(_this._boxTable).toggleClass("content-overlay");
          $(_this._boxContent).hide();
          $(_this._boxContent).fadeToggle(500, "linear");
          return _this.drawChart();
        };
      })(this));
    };

    Container.prototype._enableClose = function() {
      return $(this._closeBtn).on("click", (function(_this) {
        return function(event) {
          event.preventDefault();
          return $(_this._container).hide("slide", "linear", 600);
        };
      })(this));
    };

    Container.prototype._enableSelect = function(select) {
      return $(select).on("change", (function(_this) {
        return function(event) {
          return _this.drawChart();
        };
      })(this));
    };

    return Container;

  })();

  H5.Charts.GoogleCharts = (function(_super) {
    __extends(GoogleCharts, _super);

    function GoogleCharts() {
      GoogleCharts.__super__.constructor.apply(this, arguments);
      this.createChart();
    }

    GoogleCharts.prototype.createDataTable = function() {
      return this.data = new google.visualization.DataTable();
    };

    GoogleCharts.prototype.createChart = function() {
      if (this.options.type === "Gauge") {
        this.chart = new google.visualization.Gauge(this._boxContent);
      } else {
        this.chart = new google.visualization[this.options.type + "Chart"](this._boxContent);
      }
      return this._detectScreenChanges();
    };

    GoogleCharts.prototype._detectScreenChanges = function() {
      var orientationEvent, supportsOrientationChange;
      supportsOrientationChange = "onorientationchange" in window;
      orientationEvent = (supportsOrientationChange ? "orientationchange" : "resize");
      return window.addEventListener(orientationEvent, ((function(_this) {
        return function() {
          if ($(_this._boxContent).is(":visible") && !_this.options.resizing) {
            _this.options.resizing = true;
            _this.drawChart();
            return _this.options.resizing = false;
          }
        };
      })(this)), false);
    };

    GoogleCharts.prototype._enableTable = function() {
      return $(this._tableBtn).on("click", (function(_this) {
        return function(event) {
          var visualization;
          event.preventDefault();
          if ($(_this._boxContent).is(":hidden")) {
            _this._minIcon.className = "icon-chevron-up";
            $(_this._boxContent).fadeToggle('fast', 'linear');
          }
          $(_this._boxTable).fadeToggle('fast', 'linear');
          if (_this._tableIcon.className === "icon-table") {
            _this._tableIcon.className = "icon-bar-chart";
            visualization = new google.visualization.Table(_this._boxTable);
            visualization.draw(_this.data, null);
          } else {
            _this._tableIcon.className = "icon-table";
          }
          return $(_this._leftBtn).add(_this._rightBtn).add(_this._addBtn).add(_this._delBtn).on("click", function(event) {
            if ($(_this._boxTable).is(":visible")) {
              visualization = new google.visualization.Table(_this._boxTable);
              return visualization.draw(_this.data, null);
            }
          });
        };
      })(this));
    };

    GoogleCharts.prototype._enableExport = function() {
      var generateCSV;
      generateCSV = (function(_this) {
        return function() {
          var col, line, row, str, title, value, _i, _j, _k, _ref, _ref1, _ref2;
          str = "";
          line = "";
          for (col = _i = 0, _ref = _this.data.getNumberOfColumns(); 0 <= _ref ? _i < _ref : _i > _ref; col = 0 <= _ref ? ++_i : --_i) {
            title = _this.data.getColumnLabel(col);
            line += "\"" + title + "\",";
          }
          str += line + "\r\n";
          for (row = _j = 0, _ref1 = _this.data.getNumberOfRows(); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; row = 0 <= _ref1 ? ++_j : --_j) {
            line = "";
            for (col = _k = 0, _ref2 = _this.data.getNumberOfColumns(); 0 <= _ref2 ? _k < _ref2 : _k > _ref2; col = 0 <= _ref2 ? ++_k : --_k) {
              value = _this.data.getFormattedValue(row, col);
              line += "\"" + value + "\",";
            }
            str += line + "\r\n";
          }
          return str;
        };
      })(this);
      return $(this._exportBtn).click(function() {
        var csv;
        csv = generateCSV();
        return window.open("data:text/csv;charset=utf-8," + escape(csv));
      });
    };

    return GoogleCharts;

  })(H5.Charts.Container);

  H5.Charts.SmallContainer = (function() {
    SmallContainer.prototype.options = {
      type: null,
      container: null,
      title: "",
      popover: false
    };

    function SmallContainer(options) {
      this.options = $.extend({}, this.options, options);
      this._createContainer();
    }

    SmallContainer.prototype._createContainer = function() {
      var leftCtrl, rightCtrl;
      this._container = document.getElementById(this.options.container);
      leftCtrl = document.createElement("div");
      leftCtrl.className = "left";
      this._leftCtrl = leftCtrl;
      rightCtrl = document.createElement("div");
      rightCtrl.className = "right";
      this._rightCtrl = rightCtrl;
      $(this._container).append(this._leftCtrl, this._rightCtrl);
      if (this.options.popover) {
        $(this._container).addClass("popover-" + this.options.container);
        return this._createPopover();
      }
    };

    SmallContainer.prototype._createPopover = function() {
      var html, placement, trigger;
      placement = "bottom";
      trigger = "hover";
      html = true;
      return $(".popover-" + this.options.container).popover({
        placement: placement,
        delay: {
          show: 700,
          hide: 300
        },
        content: "<span>" + this.options.popover + "</span>",
        trigger: trigger,
        html: html
      });
    };

    return SmallContainer;

  })();

  H5.Charts.Knobs = (function(_super) {
    __extends(Knobs, _super);

    function Knobs() {
      return Knobs.__super__.constructor.apply(this, arguments);
    }

    Knobs.prototype.updateInfo = function(value) {
      $(this._rightCtrl).html("<strong>" + value + "%</strong><br/> " + this.options.title);
      return this._updateChart(parseFloat(value));
    };

    Knobs.prototype._createContainer = function() {
      var dial;
      Knobs.__super__._createContainer.apply(this, arguments);
      dial = document.createElement("input");
      dial.type = "text";
      dial.className = "dial";
      this._dial = dial;
      $(this._leftCtrl).append(this._dial);
      return this._createChart();
    };

    Knobs.prototype._createChart = function() {
      $(this._dial).knob({
        min: -100,
        max: 100,
        bgColor: "#DEDEDE",
        fgColor: "#DEDEDE",
        angleOffset: -125,
        angleArc: 250,
        readOnly: true,
        width: 58,
        height: 58,
        thickness: 0.5,
        displayInput: false,
        color: this.options.color,
        draw: function() {
          var color, value, _max, _min;
          value = this.val();
          _min = this.o.min;
          _max = this.o.max;
          if (this.o.color === "coldtohot") {
            if ((_min <= value && value <= _min * 0.3)) {
              color = pusher.color("#67C2EF");
            } else if ((_min * 0.3 < value && value <= _max * 0.3)) {
              color = pusher.color("#CBE968");
            } else if ((_max * 0.3 < value && value <= _max * 0.7)) {
              color = pusher.color("#FABB3D");
            } else if ((_max * 0.7 < value && value <= _max * 0.9)) {
              color = pusher.color("#FA603D");
            } else {
              color = pusher.color("#FF5454");
            }
          } else {
            if (value <= 0) {
              color = pusher.color("#D0FC3F");
            } else if ((0 < value && value <= _max * 0.6)) {
              color = pusher.color("#FCAC0A");
            } else {
              color = pusher.color("#FC2121");
            }
          }
          return this.o.fgColor = color.html();
        }
      });
      return $(this._dial).val(0).trigger("change");
    };

    Knobs.prototype._updateChart = function(total) {
      var dial;
      dial = $(this._leftCtrl).find('.dial');
      if (!H5.isMobile.any()) {
        return $({
          value: dial.val()
        }).animate({
          value: total
        }, {
          duration: 2000,
          easing: "easeOutBounce",
          step: function() {
            return dial.val(Math.floor(this.value)).trigger("change");
          }
        });
      } else {
        return dial.val(Math.floor(total)).trigger("change");
      }
    };

    return Knobs;

  })(H5.Charts.SmallContainer);

  H5.Charts.Sparks = (function(_super) {
    __extends(Sparks, _super);

    function Sparks() {
      return Sparks.__super__.constructor.apply(this, arguments);
    }

    Sparks.prototype.updateInfo = function(data, value) {
      $(this._rightCtrl).html("<strong>" + value + "</strong><br /> " + this.options.title);
      return this._updateChart(data);
    };

    Sparks.prototype._createContainer = function() {
      var spark;
      Sparks.__super__._createContainer.apply(this, arguments);
      spark = document.createElement("div");
      spark.className = "minichart";
      this._spark = spark;
      return $(this._leftCtrl).append(this._spark);
    };

    Sparks.prototype._updateChart = function(data) {
      return $(this._spark).sparkline(data, {
        width: 58,
        height: 62,
        lineColor: "#2FABE9",
        fillColor: "#67C2EF",
        spotColor: "#CBE968",
        maxSpotColor: "#FF5454",
        minSpotColor: "#67C2EF",
        spotRadius: 1.5,
        lineWidth: 1
      });
    };

    return Sparks;

  })(H5.Charts.SmallContainer);

  H5.Table = (function() {
    Table.prototype.options = {
      insertNewType: null,
      container: null,
      title: null,
      table: null,
      primaryTable: null,
      url: "",
      registUpdate: false,
      fields: null,
      uniqueField: {
        field: null,
        insertable: false
      },
      buttons: {
        arrows: false,
        "export": false,
        minimize: false,
        maximize: false,
        close: false
      }
    };

    Table.prototype.data = null;

    function Table(options) {
      this.options = $.extend({}, this.options, options);
      this._createContainer();
    }

    Table.prototype._createContainer = function() {
      var boxContent, boxHeader, boxTitle, closeBtn, closeIcon, exportBtn, exportIcon, leftBtn, leftCtrl, leftIcon, maxBtn, maxIcon, minBtn, minIcon, pipeline, rightBtn, rightCtrl, rightIcon;
      this._container = document.getElementById(this.options.container);
      boxHeader = document.createElement("div");
      boxHeader.className = "box-header";
      this._boxHeader = boxHeader;
      boxTitle = document.createElement("h2");
      boxTitle.innerHTML = this.options.title;
      this._boxTitle = boxTitle;
      leftCtrl = document.createElement("div");
      leftCtrl.className = "btn-group chart-icon btn-left";
      this._leftCtrl = leftCtrl;
      rightCtrl = document.createElement("div");
      rightCtrl.className = "btn-group chart-icon btn-right";
      this._rightCtrl = rightCtrl;
      boxContent = document.createElement("div");
      boxContent.id = "database-" + this.options.container;
      boxContent.className = "box-content-database";
      this._boxContent = boxContent;
      $(this._boxHeader).append(this._leftCtrl, this._boxTitle, this._rightCtrl);
      $(this._container).append(this._boxHeader, this._boxContent, this._chartFooter);
      pipeline = "<span class=\"break\"></span>";
      if (this.options.buttons.arrows) {
        $(this._boxTitle).prepend(pipeline);
        leftBtn = document.createElement("button");
        leftBtn.id = this.options.container + "-btn-left";
        leftBtn.className = "btn";
        this._leftBtn = leftBtn;
        leftIcon = document.createElement("i");
        leftIcon.className = "icon-arrow-left";
        this._leftIcon = leftIcon;
        $(this._leftBtn).append(this._leftIcon);
        rightBtn = document.createElement("button");
        rightBtn.id = this.options.container + "-btn-right";
        rightBtn.className = "btn";
        this._rightBtn = rightBtn;
        rightIcon = document.createElement("i");
        rightIcon.className = "icon-arrow-right";
        this._rightIcon = rightIcon;
        $(this._rightBtn).append(this._rightIcon);
        $(this._leftCtrl).append(this._leftBtn, this._rightBtn);
      }
      if (this.options.buttons["export"]) {
        exportBtn = document.createElement("button");
        exportBtn.id = this.options.container + "-btn-export";
        exportBtn.className = "btn";
        this._exportBtn = exportBtn;
        exportIcon = document.createElement("i");
        exportIcon.className = "icon-download-alt";
        this._exportIcon = exportIcon;
        $(this._exportBtn).append(this._exportIcon);
        $(this._rightCtrl).append(this._exportBtn);
        this._enableExport();
      }
      if (this.options.buttons.minimize) {
        minBtn = document.createElement("button");
        minBtn.id = this.options.container + "-btn-minimize";
        minBtn.className = "btn";
        this._minBtn = minBtn;
        minIcon = document.createElement("i");
        minIcon.className = "icon-chevron-up";
        this._minIcon = minIcon;
        $(this._minBtn).append(this._minIcon);
        $(this._rightCtrl).append(this._minBtn);
        this._enableMinimize();
      }
      if (this.options.buttons.maximize) {
        maxBtn = document.createElement("button");
        maxBtn.id = this.options.container + "-btn-maximize";
        maxBtn.className = "btn";
        this._maxBtn = maxBtn;
        maxIcon = document.createElement("i");
        maxIcon.className = "icon-resize-full";
        this._maxIcon = maxIcon;
        $(this._maxBtn).append(this._maxIcon);
        $(this._rightCtrl).append(this._maxBtn);
        this._enableMaximize();
      }
      if (this.options.buttons.close) {
        closeBtn = document.createElement("button");
        closeBtn.id = this.options.container + "-btn-close";
        closeBtn.className = "btn";
        this._closeBtn = closeBtn;
        closeIcon = document.createElement("i");
        closeIcon.className = "icon-remove";
        this._closeIcon = closeIcon;
        $(this._closeBtn).append(this._closeIcon);
        $(this._rightCtrl).append(this._closeBtn);
        this._enableClose();
      }
      return this._createTable();
    };

    Table.prototype._enableMinimize = function() {
      return $(this._minBtn).on("click", (function(_this) {
        return function(event) {
          event.preventDefault();
          if ($(_this._boxContent).is(":visible")) {
            _this._minIcon.className = "icon-chevron-down";
            if (_this.options.buttons.minusplus) {
              $(_this._addBtn).prop("disabled", true);
              $(_this._delBtn).prop("disabled", true);
            } else if (_this.options.buttons.arrows) {
              $(_this._leftBtn).prop("disabled", true);
              $(_this._rightBtn).prop("disabled", true);
            }
          } else {
            _this._minIcon.className = "icon-chevron-up";
            if (_this.options.buttons.minusplus) {
              $(_this._addBtn).prop("disabled", false);
              $(_this._delBtn).prop("disabled", false);
            } else if (_this.options.buttons.arrows) {
              $(_this._leftBtn).prop("disabled", false);
              $(_this._rightBtn).prop("disabled", false);
            }
          }
          if ($(_this._boxTable).is(":visible")) {
            $(_this._boxTable).slideToggle("fast", "linear");
          }
          return $(_this._boxContent).slideToggle("fast", "linear");
        };
      })(this));
    };

    Table.prototype._enableMaximize = function() {
      return $(this._maxBtn).on("click", (function(_this) {
        return function(event) {
          event.preventDefault();
          if (_this._maxIcon.className === "icon-resize-full") {
            _this.defaultClass = _this._container.className;
            $(_this._minBtn).prop("disabled", true);
            $(_this._closeBtn).prop("disabled", true);
            _this._maxIcon.className = "icon-resize-small";
            $("#navbar").hide();
          } else {
            $(_this._minBtn).prop("disabled", false);
            $(_this._closeBtn).prop("disabled", false);
            _this._maxIcon.className = "icon-resize-full";
            $("#navbar").show();
          }
          $(_this._boxTable).hide();
          $(_this._boxTable).toggleClass("box-table-overlay");
          $(_this._container).toggleClass(_this.defaultClass);
          $(_this._container).toggleClass("box-overlay");
          $("body").toggleClass("body-overlay");
          $(_this._boxContent).toggleClass("content-overlay");
          $(_this._boxTable).toggleClass("content-overlay");
          $(_this._boxContent).hide();
          return $(_this._boxContent).fadeToggle(500, "linear");
        };
      })(this));
    };

    Table.prototype._enableClose = function() {
      return $(this._closeBtn).on("click", (function(_this) {
        return function(event) {
          event.preventDefault();
          return $(_this._container).hide("slide", "linear", 600);
        };
      })(this));
    };

    Table.prototype._enableExport = function() {
      var generateCSV;
      generateCSV = (function(_this) {
        return function() {
          var line, str;
          str = "";
          line = "";
          $.each(_this.options.fields, function(key, value) {
            if (!((value.isVisible != null) && !value.isVisible)) {
              return line += "\"" + value.columnName + "\",";
            }
          });
          str += line + "\r\n";
          $.each(_this.data, function(key, value) {
            line = "";
            $.each(value, function(key, field) {
              return line += "\"" + field + "\",";
            });
            return str += line + "\r\n";
          });
          return str;
        };
      })(this);
      return $(this._exportBtn).click(function() {
        var csv;
        csv = generateCSV();
        return window.open("data:text/csv;charset=utf-8," + escape(csv));
      });
    };

    Table.prototype._formatFields = function() {
      var formatedFields;
      formatedFields = "";
      $.each(this.options.fields, function(key, properties) {
        if (properties.tableName != null) {
          return formatedFields += properties.tableName + ",";
        } else {
          return formatedFields += key + ",";
        }
      });
      return formatedFields.substring(0, formatedFields.length - 1);
    };

    Table.prototype._createTable = function() {
      var addBtn, addTypeBtn, defaultName, field, head, i, iconBtn, rest, row;
      this._table = document.createElement("table");
      this._table.className = "table table-striped";
      rest = new H5.Rest({
        url: this.options.url,
        table: this.options.table,
        fields: this._formatFields(),
        order: this.options.uniqueField.field,
        parameters: this.options.parameters
      });
      this.data = rest.data;
      $.each(this.data, (function(_this) {
        return function(key, properties) {
          var actionBtns, delBtn, field, i, icon, row;
          row = _this._table.insertRow();
          i = 0;
          $.each(properties, function(nameField, nameTable) {
            var field, span, value;
            span = document.createElement("span");
            field = row.insertCell(i++);
            $(field).append(span);
            if (!(nameField === _this.options.uniqueField.field && !_this.options.uniqueField.insertable)) {
              if (_this.options.fields[nameField].searchData != null) {
                value = '';
                if (_this.options.fields[nameField].defaultValue != null) {
                  value = _this.options.fields[nameField].defaultValue;
                } else {
                  $.grep(_this.options.fields[nameField].searchData, function(e) {
                    if (e.text === nameTable) {
                      return value = e.value;
                    }
                  });
                }
                $(span).editable({
                  type: 'typeahead',
                  placement: 'right',
                  source: _this.options.fields[nameField].searchData,
                  value: value,
                  validate: function(value) {
                    if (_this.options.fields[nameField].validation != null) {
                      return _this.options.fields[nameField].validation(value);
                    }
                  },
                  url: function(params) {
                    var fields, where;
                    where = "";
                    $.each(row.children, function(key, cell) {
                      var tableCell;
                      tableCell = cell.children[0];
                      if ($(tableCell).attr("data-field") === _this.options.uniqueField.field) {
                        return where = _this.options.uniqueField.field + "%3D" + tableCell.innerHTML;
                      }
                    });
                    if (params.value != null) {
                      fields = $(span).attr("data-field") + "%3D'" + params.value + "'";
                    } else {
                      fields = $(span).attr("data-field") + "%3D'" + params.value + "'";
                    }
                    if (_this.options.primaryTable != null) {
                      if (_this.options.registUpdate) {
                        fields = fields + ",dt_registro%3Dnow\(\)";
                      }
                      rest = new H5.Rest({
                        url: _this.options.url,
                        table: _this.options.primaryTable,
                        fields: fields,
                        parameters: where,
                        restService: "ws_updatequery.php"
                      });
                    } else {
                      rest = new H5.Rest({
                        url: _this.options.url,
                        table: _this.options.table,
                        fields: fields,
                        parameters: where,
                        restService: "ws_updatequery.php"
                      });
                    }
                    return _this._reloadTable();
                  }
                });
              } else if (_this.options.fields[nameField].selectArray != null) {
                value = '';
                if (_this.options.fields[nameField].defaultValue != null) {
                  value = _this.options.fields[nameField].defaultValue;
                } else {
                  $.grep(_this.options.fields[nameField].selectArray, function(e) {
                    if (e.value === nameTable.trim()) {
                      return value = e.value;
                    }
                  });
                }
                $(span).editable({
                  type: 'select',
                  placement: 'left',
                  source: _this.options.fields[nameField].selectArray,
                  value: value,
                  validate: function(value) {
                    if (_this.options.fields[nameField].validation != null) {
                      return _this.options.fields[nameField].validation(value);
                    }
                  },
                  url: function(params) {
                    var fields, where;
                    where = "";
                    $.each(row.children, function(key, cell) {
                      var tableCell;
                      tableCell = cell.children[0];
                      if ($(tableCell).attr("data-field") === _this.options.uniqueField.field) {
                        return where = _this.options.uniqueField.field + "%3D" + tableCell.innerHTML;
                      }
                    });
                    if (params.value != null) {
                      fields = $(span).attr("data-field") + "%3D'" + params.value + "'";
                    } else {
                      fields = $(span).attr("data-field") + "%3D'" + params.value + "'";
                    }
                    if (_this.options.primaryTable != null) {
                      if (_this.options.registUpdate) {
                        fields = fields + ",dt_registro%3Dnow\(\)";
                      }
                      rest = new H5.Rest({
                        url: _this.options.url,
                        table: _this.options.primaryTable,
                        fields: fields,
                        parameters: where,
                        restService: "ws_updatequery.php"
                      });
                    } else {
                      rest = new H5.Rest({
                        url: _this.options.url,
                        table: _this.options.table,
                        fields: fields,
                        parameters: where,
                        restService: "ws_updatequery.php"
                      });
                    }
                    return _this._reloadTable();
                  }
                });
              } else {
                $(span).editable({
                  type: 'text',
                  pk: key,
                  value: nameTable,
                  validate: function(value) {
                    if (_this.options.fields[nameField].validation != null) {
                      return _this.options.fields[nameField].validation(value);
                    }
                  },
                  url: function(params) {
                    var fields, where;
                    where = "";
                    $.each(row.children, function(key, cell) {
                      var tableCell;
                      tableCell = cell.children[0];
                      if ($(tableCell).attr("data-field") === _this.options.uniqueField.field) {
                        return where = _this.options.uniqueField.field + "%3D" + tableCell.innerHTML;
                      }
                    });
                    fields = $(span).attr("data-field") + "%3D'" + params.value + "'";
                    if (_this.options.primaryTable != null) {
                      if (_this.options.registUpdate) {
                        fields = fields + ",dt_registro%3Dnow\(\)";
                      }
                      rest = new H5.Rest({
                        url: _this.options.url,
                        table: _this.options.primaryTable,
                        fields: fields,
                        parameters: where,
                        restService: "ws_updatequery.php"
                      });
                    } else {
                      rest = new H5.Rest({
                        url: _this.options.url,
                        table: _this.options.table,
                        fields: fields,
                        parameters: where,
                        restService: "ws_updatequery.php"
                      });
                    }
                    return _this._reloadTable();
                  }
                });
              }
            } else {
              span.innerHTML = nameTable;
            }
            if (_this.options.fields[nameField].primaryField) {
              $(span).attr("data-field", _this.options.fields[nameField].primaryField);
            } else {
              $(span).attr("data-field", nameField);
            }
            if ((_this.options.fields[nameField].isVisible != null) && !_this.options.fields[nameField].isVisible) {
              return $(field).attr("style", "display:none;");
            }
          });
          field = row.insertCell(i++);
          delBtn = document.createElement("a");
          delBtn.id = "delRowBtn";
          delBtn.className = "btn ";
          icon = document.createElement("i");
          icon.className = "icon-trash";
          $(delBtn).append(icon);
          actionBtns = document.createElement("div");
          $(actionBtns).append(delBtn);
          $(field).append(actionBtns);
          _this._delFields(delBtn, row);
          return _this._lastRow = row;
        };
      })(this));
      addBtn = document.createElement("a");
      addBtn.id = "addBotao";
      addBtn.className = "btn";
      iconBtn = document.createElement("i");
      iconBtn.className = "icon-plus";
      $(addBtn).append(iconBtn);
      if (!(this.options.buttons.minimize && !this.options.buttons.maximize && !this.options.buttons.close)) {
        $(addBtn).append(" Adicionar");
      }
      this._addBtn = addBtn;
      this._addTypeBtn = null;
      if (this.options.insertNewType != null) {
        addTypeBtn = document.createElement("a");
        addTypeBtn.id = "addTipoBotao";
        addTypeBtn.className = "btn";
        iconBtn = document.createElement("i");
        iconBtn.className = "icon-plus";
        $(addTypeBtn).append(iconBtn);
        defaultName = " Novo Tipo";
        if (!(this.options.buttons.minimize && !this.options.buttons.maximize && !this.options.buttons.close)) {
          $(addTypeBtn).append(defaultName);
        }
        $(addTypeBtn).editable({
          type: 'text',
          value: "",
          placement: 'right',
          display: false,
          url: (function(_this) {
            return function(params) {
              if (params.value !== '') {
                rest = new H5.Rest({
                  url: _this.options.url,
                  table: _this.options.insertNewType,
                  fields: " (nome) values ('" + params.value + "') ",
                  restService: "ws_insertquery.php"
                });
              }
              return _this._reloadSearchData();
            };
          })(this)
        });
        this._addTypeBtn = addTypeBtn;
      }
      $(this._rightCtrl).append(addBtn);
      $(this._rightCtrl).append(addTypeBtn);
      this._addFields();
      $(this._boxContent).append(this._table);
      head = this._table.createTHead();
      row = head.insertRow(0);
      i = 0;
      $.each(this.options.fields, function(key, value) {
        var field;
        field = row.insertCell(i++);
        if (!((value.isVisible != null) && !value.isVisible)) {
          return field.innerHTML = "<strong>" + value.columnName + "</strong>";
        } else {
          return $(field).attr('style', 'display:none;');
        }
      });
      field = row.insertCell(i++);
      return $(field).width(37);
    };

    Table.prototype._addNewType = function() {
      return $(this._addTypeBtn).on("click", (function(_this) {
        return function(event) {
          return event.preventDefault();
        };
      })(this));
    };

    Table.prototype._addFields = function() {
      return $(this._addBtn).on("click", (function(_this) {
        return function(event) {
          var closeBtn, delBtn, div, i, icon, newRow, saveBtn, tbody, td;
          event.preventDefault();
          newRow = document.createElement("tr");
          i = 0;
          $.each(_this.options.fields, function(key, properties) {
            var dataField, span, td, value;
            td = newRow.insertCell(i++);
            span = document.createElement("span");
            if (key !== _this.options.uniqueField.field || _this.options.uniqueField.insertable) {
              value = "";
              if (properties.defaultValue != null) {
                value = properties.defaultValue;
              }
              if (properties.searchData != null) {
                $(span).editable({
                  type: 'typeahead',
                  value: value,
                  source: properties.searchData,
                  placement: 'right'
                });
              } else if (properties.selectArray != null) {
                $(span).editable({
                  type: 'select',
                  value: value,
                  source: properties.selectArray,
                  placement: 'left'
                });
              } else {
                $(span).editable({
                  type: 'text',
                  value: value
                });
              }
            }
            if (properties.primaryField != null) {
              dataField = properties.primaryField;
            } else {
              dataField = key;
            }
            if ((properties.isVisible != null) && !properties.isVisible) {
              $(td).attr("style", "display:none");
            }
            $(span).attr("data-field", dataField);
            return $(td).append(span);
          });
          delBtn = document.createElement("a");
          delBtn.id = "deletarBotaoTabela";
          delBtn.className = "btn ";
          $(delBtn).attr("style", "display:none");
          icon = document.createElement("i");
          icon.className = "icon-trash ";
          $(delBtn).append(icon);
          _this._delFields(delBtn, newRow);
          saveBtn = document.createElement("a");
          saveBtn.id = "salvarBotaoTabela";
          saveBtn.className = "btn btn-primary editable-submit ";
          icon = document.createElement("i");
          icon.className = "icon-ok ";
          $(saveBtn).append(icon);
          _this._saveFields(saveBtn, delBtn, newRow);
          closeBtn = document.createElement("a");
          closeBtn.id = "fecharBotaoTabela";
          closeBtn.className = "btn editable-cancel ";
          icon = document.createElement("i");
          icon.className = "icon-remove";
          $(closeBtn).append(icon);
          _this._closeFields(closeBtn, newRow);
          div = document.createElement("div");
          $(div).append(saveBtn);
          $(div).append(delBtn);
          $(div).append(closeBtn);
          td = newRow.insertCell(i++);
          $(td).append(div);
          if (_this._lastRow != null) {
            $(newRow).insertAfter($(_this._lastRow));
          } else {
            tbody = document.getElementsByName(_this.options.container)[0].getElementsByClassName('table')[0].appendChild(document.createElement('tbody'));
            tbody.appendChild(newRow);
          }
          return _this._lastRow = newRow;
        };
      })(this));
    };

    Table.prototype._delFields = function(delBtn, tableRow) {
      return $(delBtn).on("click", (function(_this) {
        return function(event) {
          var rest, table, where;
          event.preventDefault();
          if (confirm("Você deseja excluir essa linha do banco de dados?")) {
            if (_this._lastRow === tableRow) {
              if (_this._table.rows.length > 2) {
                _this._lastRow = _this._table.rows.item(_this._table.rows.length - 2);
              } else {
                _this._lastRow = null;
              }
            }
            where = "";
            $.each(tableRow.children, function(key, cell) {
              var span;
              span = cell.children[0];
              if ($(span).attr("data-field") === _this.options.uniqueField.field) {
                return where = _this.options.uniqueField.field + "%3D" + span.innerHTML;
              }
            });
            table = '';
            if (_this.options.primaryTable != null) {
              table = _this.options.primaryTable;
            } else {
              table = _this.options.table;
            }
            rest = new H5.Rest({
              url: _this.options.url,
              table: table,
              parameters: where,
              restService: "ws_deletequery.php"
            });
            return _this._reloadTable();
          } else {
            return alert("Operação cancelada");
          }
        };
      })(this));
    };

    Table.prototype._saveFields = function(saveBtn, delBtn, tableRow) {
      return $(saveBtn).on("click", (function(_this) {
        return function(event) {
          var fields, i, rest, save, values;
          event.preventDefault();
          save = true;
          fields = "";
          values = "";
          i = 0;
          $.each(_this.options.fields, function(key, properties) {
            var ret, span, val;
            span = tableRow.children[i].children[0];
            if (_this.options.uniqueField.field !== key || _this.options.uniqueField.insertable) {
              if (properties.primaryField != null) {
                fields += properties.primaryField + ",";
              } else {
                fields += key + ",";
              }
              if (properties.searchData != null) {
                val = null;
                val = $.grep(properties.searchData, function(e) {
                  if (e.text === span.innerHTML) {
                    return e;
                  }
                });
                if (properties.validation != null) {
                  ret = properties.validation(span.innerHTML);
                  if (ret !== "") {
                    save = false;
                    alert(properties.columnName + ": " + ret);
                  }
                }
                if (!$.isEmptyObject(val)) {
                  values += "'" + val[0].value + "',";
                }
              } else if (properties.selectArray != null) {
                val = null;
                val = $.grep(properties.selectArray, function(e) {
                  if (e.text === span.innerHTML) {
                    return e.value;
                  }
                });
                values += "'" + val[0].value + "',";
              } else {
                if (properties.validation != null) {
                  ret = properties.validation(span.innerHTML);
                  if (ret !== "") {
                    save = false;
                    alert(properties.columnName + ": " + ret);
                  }
                }
                values += "'" + span.innerHTML + "',";
              }
              if (_this.options.primaryTable != null) {
                $(span).editable({
                  validate: function(value) {
                    if (_this.options.fields[key].validation != null) {
                      return _this.options.fields[key].validation(value);
                    }
                  },
                  url: function(params) {
                    var rest, where;
                    where = "";
                    $.each(row.children, function(key, cell) {
                      var tableCell;
                      tableCell = cell.children[0];
                      if ($(tableCell).attr("data-field") === _this.options.uniqueField.field) {
                        return where = _this.options.uniqueField.field + "%3D" + tableCell.innerHTML;
                      }
                    });
                    fields = $(span).attr("data-field") + "%3D'" + params.value + "'";
                    if (_this.options.registUpdate) {
                      fields = fields + ",dt_registro%3Dnow\(\)";
                    }
                    rest = new H5.Rest({
                      url: _this.options.url,
                      table: _this.options.primaryTable,
                      fields: fields,
                      parameters: where,
                      restService: "ws_updatequery.php"
                    });
                    return _this._reloadTable();
                  }
                });
              } else {
                $(span).editable({
                  validate: function(value) {
                    if (_this.options.fields[key].validation != null) {
                      return _this.options.fields[key].validation(value);
                    }
                  },
                  url: function(params) {
                    var rest, where;
                    where = "";
                    $.each(row.children, function(key, cell) {
                      var tableCell;
                      tableCell = cell.children[0];
                      if ($(tableCell).attr("data-field") === _this.options.uniqueField.field) {
                        return where = _this.options.uniqueField.field + "%3D" + tableCell.innerHTML;
                      }
                    });
                    if (params.value != null) {
                      fields = $(span).attr("data-field") + "%3D'" + params.value + "'";
                    } else {
                      fields = $(span).attr("data-field") + "%3D'" + params.value + "'";
                    }
                    if (_this.options.registUpdate) {
                      fields = fields + ",dt_registro%3Dnow\(\)";
                    }
                    rest = new H5.Rest({
                      url: _this.options.url,
                      table: _this.options.table,
                      fields: fields,
                      parameters: where,
                      restService: "ws_updatequery.php"
                    });
                    return _this._reloadTable();
                  }
                });
              }
            } else if (span.innerHTML !== "" && span.innerHTML !== "Vazio") {
              fields += "" + key + ",";
              values += "'" + span.innerHTML + "',";
            }
            return i++;
          });
          fields = fields.substring(0, fields.length - 1);
          values = values.substring(0, values.length - 1);
          if (_this.options.registUpdate) {
            fields = fields + ",dt_registro";
            values = values + ",now()";
          }
          fields = " (" + fields + ") values (" + values + ") ";
          if (save) {
            if (_this.options.primaryTable != null) {
              rest = new H5.Rest({
                url: _this.options.url,
                table: _this.options.primaryTable,
                fields: fields,
                restService: "ws_insertquery.php"
              });
            } else {
              rest = new H5.Rest({
                url: _this.options.url,
                table: _this.options.table,
                fields: fields,
                restService: "ws_insertquery.php"
              });
            }
            return _this._reloadTable();
          }
        };
      })(this));
    };

    Table.prototype._closeFields = function(closeBtn, tableRow) {
      $(closeBtn).on("click", function(event) {
        return $(this).closest('tr').remove();
      });
      return this._lastRow = null;
    };

    Table.prototype._reloadTable = function() {
      $.each($(this._container.children), function(key, childs) {
        return $(childs).remove();
      });
      this._lastRow = null;
      return this.constructor(this.options);
    };

    Table.prototype._reloadSearchData = function() {
      return $.each(this.options.fields, (function(_this) {
        return function(key, childs) {
          var rest, searchData;
          if (childs.searchData != null) {
            rest = new H5.Rest({
              url: _this.options.url,
              table: "produto_outro",
              fields: "id_produto_outro,nome",
              order: "nome"
            });
            searchData = [];
            $.each(rest.data, function() {
              var elements;
              elements = {
                value: this.id_produto_outro,
                text: $.trim(this.nome)
              };
              return searchData.push(elements);
            });
            return childs.searchData = searchData;
          }
        };
      })(this));
    };

    return Table;

  })();

  H5.Draw = (function() {
    Draw.prototype.options = {
      map: null,
      url: null,
      srid: null,
      uniquePoint: null,
      loadDrawn: false,
      reloadShape: true,
      buttons: {
        marker: true,
        line: true,
        polygon: true,
        rectangle: true,
        circle: true,
        edit: true,
        remove: true
      },
      tables: null
    };

    Draw.prototype.data = null;

    Draw.prototype.idMarker = "";

    Draw.prototype.idPolyline = "";

    Draw.prototype.idPolygon = "";

    Draw.prototype.drawnItems = null;

    function Draw(options) {
      this.options = $.extend({}, this.options, options);
      this._addDrawFunction();
    }

    Draw.prototype._addDrawFunction = function() {
      var drawControl;
      this.drawnItems = new L.FeatureGroup();
      this.options.map.addLayer(this.drawnItems);
      drawControl = new L.Control.Draw({
        draw: {
          marker: this.options.buttons.marker,
          polyline: this.options.buttons.polyline,
          polygon: this.options.buttons.polygon,
          rectangle: this.options.buttons.rectangle,
          circle: this.options.buttons.circle
        },
        edit: {
          featureGroup: this.drawnItems,
          edit: this.options.buttons.edit,
          remove: this.options.buttons.remove
        }
      });
      this.options.map.addControl(drawControl);
      if (this.options.reloadShape) {
        this.reloadShape();
      }
      this._getNextIdTable();
      this._addDrawButtonActions();
      return this._addRemoveButtonActions();
    };

    Draw.prototype._getNextIdTable = function() {
      return $.each(this.options.buttons, (function(_this) {
        return function(key, value) {
          var rest;
          if (value === true) {
            if (key === 'polygon' || key === 'rectangle' || key === 'circle') {
              if (_this.idPolygon === "") {
                rest = new H5.Rest({
                  url: _this.options.url,
                  fields: "nextval('" + _this.options.tables['polygon'].table + "_" + _this.options.tables['polygon'].uniqueField + "_seq') as lastval",
                  restService: "ws_selectonlyquery.php"
                });
                return _this.idPolygon = rest.data[0].lastval;
              }
            } else if (key === 'polyline') {
              if (_this.idPolyline === "") {
                rest = new H5.Rest({
                  url: _this.options.url,
                  fields: "nextval('" + _this.options.tables[key].table + "_" + _this.options.tables[key].uniqueField + "_seq') as lastval",
                  restService: "ws_selectonlyquery.php"
                });
                return _this.idPolyline = rest.data[0].lastval;
              }
            } else if (key === 'marker') {
              if (_this.idMarker === "") {
                rest = new H5.Rest({
                  url: _this.options.url,
                  fields: "nextval('" + _this.options.tables[key].table + "_" + _this.options.tables[key].uniqueField + "_seq') as lastval",
                  restService: "ws_selectonlyquery.php"
                });
                return _this.idMarker = rest.data[0].lastval;
              }
            }
          }
        };
      })(this));
    };

    Draw.prototype._addDrawButtonActions = function() {
      return this.options.map.on('draw:created', (function(_this) {
        return function(e) {
          var columns, firstPoint, layer, rest, sql, type, values;
          type = e.layerType;
          layer = e.layer;
          if (type === 'polygon') {
            firstPoint = "";
            layer._leaflet_id = ++_this.idPolygon;
            columns = "";
            values = "";
            $.each(_this.options.tables[type].fields, function(key, field) {
              if (_this.options.tables[type].defaultValues[field]) {
                columns = columns + field + ",";
                return values = values + _this.options.tables[type].defaultValues[field] + ",";
              }
            });
            columns = columns + "shape,dt_registro";
            values = values + "ST_MakePolygon(ST_GeomFromText('LINESTRING(";
            $.each(layer._latlngs, function() {
              if (firstPoint === "") {
                firstPoint = this;
              }
              values = values + this.lng + " " + this.lat;
              return values = values + ",";
            });
            values = values + firstPoint.lng + " " + firstPoint.lat + ")', " + _this.options.srid + "))";
            values = values + ",now()";
            sql = "(" + columns + ") values (" + values + ")";
            rest = new H5.Rest({
              url: H5.Data.restURL,
              fields: sql,
              table: "tmp_pol",
              restService: "ws_insertquery.php"
            });
          } else if (type === 'polyline') {
            firstPoint = "";
            layer._leaflet_id = ++_this.idPolyline;
            columns = "";
            values = "";
            $.each(_this.options.tables[type].fields, function(key, field) {
              if (_this.options.tables[type].defaultValues[field]) {
                columns = columns + field + ",";
                return values = values + _this.options.tables[type].defaultValues[field] + ",";
              }
            });
            columns = columns + "shape,dt_registro";
            values = values + "ST_GeomFromText('LINESTRING(";
            $.each(layer._latlngs, function() {
              if (firstPoint === "") {
                firstPoint = true;
                return values = values + this.lng + " " + this.lat;
              } else {
                return values = values + "," + this.lng + " " + this.lat;
              }
            });
            values = values + ")', " + _this.options.srid + ")";
            values = values + ",now()";
            sql = "(" + columns + ") values (" + values + ")";
            rest = new H5.Rest({
              url: H5.Data.restURL,
              fields: sql,
              table: "tmp_lin",
              restService: "ws_insertquery.php"
            });
          } else if (type === 'rectangle') {
            type = 'polygon';
            layer._leaflet_id = ++_this.idPolygon;
            columns = "";
            values = "";
            $.each(_this.options.tables[type].fields, function(key, field) {
              if (_this.options.tables[type].defaultValues[field]) {
                columns = columns + field + ",";
                return values = values + _this.options.tables[type].defaultValues[field] + ",";
              }
            });
            columns = columns + "shape,dt_registro";
            values = values + "ST_MakeEnvelope(";
            values = values + layer._latlngs[0].lng + "," + layer._latlngs[0].lat + ", " + layer._latlngs[2].lng + "," + layer._latlngs[2].lat;
            values = values + ", " + _this.options.srid + ")";
            values = values + ",now()";
            sql = "(" + columns + ") values (" + values + ")";
            rest = new H5.Rest({
              url: H5.Data.restURL,
              fields: sql,
              table: "tmp_pol",
              restService: "ws_insertquery.php"
            });
          } else if (type === 'circle') {
            type = 'polygon';
            layer._leaflet_id = ++_this.idPolygon;
            columns = "";
            values = "";
            $.each(_this.options.tables[type].fields, function(key, field) {
              if (_this.options.tables[type].defaultValues[field]) {
                columns = columns + field + ",";
                return values = values + _this.options.tables[type].defaultValues[field] + ",";
              }
            });
            columns = columns + "shape,dt_registro";
            values = values + "ST_Buffer(ST_GeomFromText('POINT(";
            values = values + layer._latlng.lng + " " + layer._latlng.lat + ")'," + _this.options.srid + "),";
            values = values + layer._mRadius / 100010 + ")";
            values = values + ",now()";
            sql = "(" + columns + ") values (" + values + ")";
            rest = new H5.Rest({
              url: H5.Data.restURL,
              fields: sql,
              table: "tmp_pol",
              restService: "ws_insertquery.php"
            });
          } else if (type === 'marker') {
            if ((_this.options.uniquePoint == null) || (_this.options.uniquePoint === true)) {
              layer._leaflet_id = ++_this.idMarker;
              columns = "";
              values = "";
              $.each(_this.options.tables[type].fields, function(key, field) {
                if (_this.options.tables[type].defaultValues[field]) {
                  columns = columns + field + ",";
                  return values = values + _this.options.tables[type].defaultValues[field] + ",";
                }
              });
              columns = columns + "shape,dt_registro";
              values = values + "ST_SetSRID(ST_MakePoint(";
              values = values + layer._latlng.lng + "," + layer._latlng.lat + ")," + _this.options.srid + ")";
              values = values + ",now()";
              sql = "(" + columns + ") values (" + values + ")";
              rest = new H5.Rest({
                url: H5.Data.restURL,
                fields: sql,
                table: "tmp_pon",
                restService: "ws_insertquery.php"
              });
            } else {
              layer._leaflet_id = _this.options.uniquePoint._leaflet_id;
              sql = "shape=ST_SetSRID(ST_MakePoint(" + layer._latlng.lng + "," + layer._latlng.lat + ")," + _this.options.srid + ")";
              sql = sql + ",dt_registro=now()";
              rest = new H5.Rest({
                url: H5.Data.restURL,
                fields: sql,
                table: "tmp_pon",
                parameters: "id_tmp_pon%3D" + layer._leaflet_id,
                restService: "ws_updatequery.php"
              });
            }
            if ((document.getElementById('inputLat') != null) && (document.getElementById('inputLng') != null)) {
              $("#inputLat").val(_this.decimalDegree2DMS(layer._latlng.lat));
              $("#inputLng").val(_this.decimalDegree2DMS(layer._latlng.lng));
            }
          }
          if ((_this.options.uniquePoint == null) || ((_this.options.uniquePoint != null) && type !== 'marker')) {
            return _this.drawnItems.addLayer(layer);
          } else {
            _this.drawnItems.removeLayer(_this.options.uniquePoint);
            _this.options.uniquePoint = layer;
            return _this.drawnItems.addLayer(_this.options.uniquePoint);
          }
        };
      })(this));
    };

    Draw.prototype._addRemoveButtonActions = function() {
      return this.options.map.on('draw:deleted', (function(_this) {
        return function(e) {
          var rest, sqlLin, sqlPol, sqlPon, type;
          type = "";
          sqlPol = "id_tmp_pol=0 ";
          sqlLin = "id_tmp_lin=0 ";
          sqlPon = "id_tmp_pon=0 ";
          $.each(e.layers._layers, function(key, layer) {
            type = layer.toGeoJSON().geometry.type;
            if (type === 'Polygon') {
              sqlPol = sqlPol + "or id_tmp_pol=" + key + " ";
              return $.each(_this.options.tables['polygon'].defaultValues, function(key, field) {
                return sqlPol = sqlPol + "and " + key + "='" + field + "'";
              });
            } else if (type === 'LineString') {
              sqlLin = sqlLin + "or id_tmp_lin=" + key + " ";
              return $.each(_this.options.tables['polyline'].defaultValues, function(key, field) {
                return sqlLin = sqlLin + "and " + key + "='" + field + "'";
              });
            } else if (type === 'Point') {
              if (layer._mRadius != null) {
                sqlPol = sqlPol + "or id_tmp_pol=" + key + " ";
                return $.each(_this.options.tables['polygon'].defaultValues, function(key, field) {
                  return sqlPol = sqlPol + "and " + key + "='" + field + "'";
                });
              } else {
                sqlPon = sqlPon + "or id_tmp_pon=" + key + " ";
                $.each(_this.options.tables['marker'].defaultValues, function(key, field) {
                  return sqlPon = sqlPon + "and " + key + "='" + field + "'";
                });
                if ((document.getElementById('inputLat') != null) && (document.getElementById('inputLng') != null)) {
                  $("#inputLat").val('');
                  $("#inputLng").val('');
                }
                if (_this.options.uniquePoint != null) {
                  return _this.options.uniquePoint = true;
                }
              }
            }
          });
          rest = new H5.Rest({
            url: H5.Data.restURL,
            table: "tmp_pon",
            parameters: sqlPon,
            restService: "ws_deletequery.php"
          });
          rest = new H5.Rest({
            url: H5.Data.restURL,
            table: "tmp_pol",
            parameters: sqlPol,
            restService: "ws_deletequery.php"
          });
          return rest = new H5.Rest({
            url: H5.Data.restURL,
            table: "tmp_lin",
            parameters: sqlLin,
            restService: "ws_deletequery.php"
          });
        };
      })(this));
    };

    Draw.prototype.decimalDegree2DMS = function(decdegree) {
      var deg, dms, frac, min, sec;
      deg = decdegree | 0;
      frac = Math.abs(decdegree - deg);
      min = (frac * 60) | 0;
      sec = frac * 3600 - min * 60;
      dms = deg + "°" + min + "\'" + sec;
      return dms;
    };

    Draw.prototype.DMS2DecimalDegree = function(dms) {
      var d, dec, m, neg, parts, r, s;
      if (!dms) {
        return Number.NaN;
      }
      neg = dms.match(/(^\s?-)|(\s?[SW]\s?$)/) !== null ? -1.0 : 1.0;
      dms = dms.replace(/(^\s?-)|(\s?[NSEW]\s?)$/, '');
      dms = dms.replace(/\s/g, '');
      parts = dms.match(/(\d{1,3})[.,°d]?(\d{0,2})[']?(\d{0,2})[.,]?(\d{0,})(?:["]|[']{2})?/);
      if (parts === null) {
        return Number.NaN;
      }
      d = parts[1] ? parts[1] : '0.0';
      d = d * 1.0;
      m = parts[2] ? parts[2] : '0.0';
      m = m * 1.0;
      s = parts[3] ? parts[3] : '0.0';
      s = s * 1.0;
      r = parts[4] ? '0.' + parts[4] : '0.0';
      r = r * 1.0;
      dec = (d + (m / 60.0) + (s / 3600.0) + (r / 3600.0)) * neg;
      console.log(dec);
      return dec;
    };

    Draw.prototype.setPoint = function(latlng, srid) {
      var columns, rest, sql, values;
      this.drawnItems.removeLayer(this.options.uniquePoint);
      srid = srid !== "" ? srid : this.options.srid;
      if ((this.options.uniquePoint == null) || (this.options.uniquePoint === true)) {
        this.options.uniquePoint = new L.Marker([0, 0]);
        this.options.uniquePoint._leaflet_id = ++this.idMarker;
        columns = "";
        values = "";
        $.each(this.options.tables['marker'].fields, (function(_this) {
          return function(key, field) {
            if (_this.options.tables['marker'].defaultValues[field]) {
              columns = columns + field + ",";
              return values = values + _this.options.tables['marker'].defaultValues[field] + ",";
            }
          };
        })(this));
        columns = columns + "shape,dt_registro";
        values = values + "ST_SetSRID(ST_MakePoint(";
        values = values + latlng.lng + "," + latlng.lat + ")," + srid + ")";
        values = values + ",now()";
        sql = "(" + columns + ") values (" + values + ")";
        rest = new H5.Rest({
          url: H5.Data.restURL,
          fields: sql,
          table: "tmp_pon",
          restService: "ws_insertquery.php"
        });
      }
      this.options.uniquePoint._latlng.lat = latlng.lat;
      this.options.uniquePoint._latlng.lng = latlng.lng;
      return this.drawnItems.addLayer(this.options.uniquePoint);
    };

    Draw.prototype.getPoint = function() {
      return this.options.uniquePoint;
    };

    Draw.prototype.setSRID = function(newSRID) {
      return this.options.srid = newSRID;
    };

    Draw.prototype.reloadShape = function() {
      var markerList, polygonList, polylineList, rest;
      rest = new H5.Rest({
        url: this.options.url,
        fields: 'id_tmp_lin, ST_AsGeoJson(ST_FlipCoordinates(shape)) as shape',
        table: "tmp_lin",
        parameters: "nro_ocorrencia='" + this.options.tables['polyline'].defaultValues.nro_ocorrencia + "'"
      });
      polylineList = rest.data;
      $.each(polylineList, (function(_this) {
        return function(key, line) {
          var element, polyline;
          element = JSON.parse(line.shape);
          polyline = new L.Polyline(element.coordinates);
          polyline._leaflet_id = line.id_tmp_lin;
          _this.drawnItems.addLayer(polyline);
          return _this.idPolyline = line.id_tmp_lin;
        };
      })(this));
      rest = new H5.Rest({
        url: this.options.url,
        fields: 'id_tmp_pol, ST_AsGeoJson(ST_FlipCoordinates(shape)) as shape',
        table: "tmp_pol",
        parameters: "nro_ocorrencia='" + this.options.tables['polygon'].defaultValues.nro_ocorrencia + "'"
      });
      polygonList = rest.data;
      $.each(polygonList, (function(_this) {
        return function(key, pol) {
          var element, polygon;
          element = JSON.parse(pol.shape);
          polygon = new L.Polygon(element.coordinates);
          polygon._leaflet_id = pol.id_tmp_pol;
          _this.drawnItems.addLayer(polygon);
          return _this.idPolygon = pol.id_tmp_pol;
        };
      })(this));
      rest = new H5.Rest({
        url: this.options.url,
        fields: 'id_tmp_pon, ST_AsGeoJson(ST_FlipCoordinates(shape)) as shape',
        table: "tmp_pon",
        parameters: "nro_ocorrencia='" + this.options.tables['marker'].defaultValues.nro_ocorrencia + "'"
      });
      markerList = rest.data;
      return $.each(markerList, (function(_this) {
        return function(key, pon) {
          var element, point;
          element = JSON.parse(pon.shape);
          point = new L.Marker(element.coordinates);
          point._leaflet_id = pon.id_tmp_pon;
          _this.drawnItems.addLayer(point);
          if ((_this.options.uniquePoint != null)) {
            return _this.options.uniquePoint = point;
          }
        };
      })(this));
    };

    Draw.prototype.editShapes = function(pointTable, polygonTable, lineTable) {
      var fields, line, marker, polygon, rest, sql, values;
      marker = this.options.tables.marker;
      fields = '';
      values = '';
      $.each(marker.fields, function(key, value) {
        fields = fields + value + ",";
        if (marker.defaultValues[value]) {
          return values = values + marker.defaultValues[value] + " as " + value + ",";
        } else {
          return values = values + pointTable.fields[key] + ",";
        }
      });
      sql = "(" + fields + "dt_registro) select " + values + "now() as dt_registro from " + pointTable.name + " where " + pointTable.parameters.field + "%3D" + pointTable.parameters.value;
      console.log(sql);
      rest = new H5.Rest({
        url: this.options.url,
        fields: sql,
        table: this.options.tables.marker.table,
        restService: "ws_insertquery.php"
      });
      polygon = this.options.tables.polygon;
      fields = '';
      values = '';
      $.each(polygon.fields, function(key, value) {
        fields = fields + value + ",";
        if (polygon.defaultValues[value]) {
          return values = values + polygon.defaultValues[value] + " as " + value + ",";
        } else {
          return values = values + polygonTable.fields[key] + ",";
        }
      });
      sql = "(" + fields + "dt_registro) select " + values + "now() as dt_registro from " + polygonTable.name + " where " + polygonTable.parameters.field + "%3D" + polygonTable.parameters.value;
      console.log(sql);
      rest = new H5.Rest({
        url: this.options.url,
        fields: sql,
        table: polygon.table,
        restService: "ws_insertquery.php"
      });
      line = this.options.tables.polyline;
      fields = '';
      values = '';
      $.each(line.fields, function(key, value) {
        fields = fields + value + ",";
        if (line.defaultValues[value]) {
          return values = values + line.defaultValues[value] + " as " + value + ",";
        } else {
          return values = values + lineTable.fields[key] + ",";
        }
      });
      sql = "(" + fields + "dt_registro) select " + values + "now() as dt_registro from " + lineTable.name + " where " + lineTable.parameters.field + "%3D" + lineTable.parameters.value;
      console.log(sql);
      rest = new H5.Rest({
        url: this.options.url,
        fields: sql,
        table: line.table,
        restService: "ws_insertquery.php"
      });
      return this.reloadShape();
    };

    return Draw;

  })();

}).call(this);
